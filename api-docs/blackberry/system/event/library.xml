<?xml version="1.0" encoding="utf-8"?>
<library isWhitelist="true">
  <object name="blackberry.system.event" shortName="System Event" introduced="1.0.0" comment="The System Event object allows you to get access to events triggered by system events on the BlackBerry device.">
    <features>
      <feature id="blackberry.system.event" version="1.0.0"/>
    </features>
    <details>
      The System Object is static; all of its functions and properties are used directly from the object.
    </details>
    <example><![CDATA[<script type="text/javascript">
  function trapForBackKey() {
    blackberry.system.event.onHardwareKey(blackberry.system.event.KEY_BACK, handleBack);
  }

  function handleBack() {
    alert("handle back button");  
  }  
</script>]]></example>
    
    <subclasses>
      <object name="OnSystemEvent" shortName="OnSystemEvent Interface" interface="true" comment="Interface for system event callbacks.">
        <details>
          This is the interface that must be available on the system event callback function provided.
        </details>
      </object>
    </subclasses>
    
    <constants comment="[Decline Reasons]">
      <const name="KEY_BACK" type="Number" readonly="true" value="0" comment="Constant representing the back button."/>
      <const name="KEY_MENU" type="Number" readonly="true" value="1" comment="Constant representing the menu button."/>
      <const name="KEY_CONVENIENCE_1" type="Number" readonly="true" value="2" comment="Constant representing the first convenience button."/>
      <const name="KEY_CONVENIENCE_2" type="Number" readonly="true" value="3" comment="Constant representing the second convenience button."/>
      <const name="KEY_STARTCALL" type="Number" readonly="true" value="4" comment="Constant representing the call button."/>
      <const name="KEY_ENDCALL" type="Number" readonly="true" value="5" comment="Constant representing the end call button."/>
      <const name="KEY_VOLUMEDOWN" type="Number" readonly="true" value="6" comment="Constant representing the volume down button."/>
      <const name="KEY_VOLUMEUP" type="Number" readonly="true" value="7" comment="Constant representing the volume up button."/>
    </constants>
    <functions>
      <func name="onHardwareKey" returns="void" comment="Assigns a listener for the click of one of the hardware buttons on the device.">
        <param name="key" type="Number" comment="Hardware key to listen for.  A list of constants allowed for these keys is shown above."/>
        <param name="callback" type="OnSystemEvent" comment="Function to be called when the key is clicked - this function takes no parameters and no return value is required.  If you attempt to subscribe more than one callback function to a particular key, only the newest callback will be used when the key is pressed.  To remove the callback simply call the onHardwareKey with null as the callback parameter."/>
        <details>
          When a key is pressed, the system will check if you have set a callback function for that key.  If so, the default action of that key will be ignored. If you want the default action of a key to be called, then no callback can be subscribed to that key.
        </details>
      </func>
      <func name="onCoverageChange" returns="void" comment="Assigns a listener for when the coverage status changes.">
        <param name="callback" type="OnSystemEvent" comment="Function to be called when coverage changes.  Only one function can be assigned to this event. To unregister the callback, call the onCoverageChange method and pass in null for the callback parameter."/>
        <details>
          This event will be fired in two scenarios: 1) When the device travels in and out of coverage that would result in the boolean state of the hasDataCoverage property to change.  2) When the device drops in or out of a Wi-Fi hotspot
          
          The developer will be able to check the blackberry.system.hasDataCoverage property and the blackberry.network property to determine the current state of the device when this event fires.
        </details>
      </func>
    </functions>
    
  </object>
</library>
