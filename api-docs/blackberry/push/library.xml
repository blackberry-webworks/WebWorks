<?xml version="1.0" encoding="utf-8"?>
<library isWhitelist="true">
  <extension id="blackberry.push">
    <entryClass>blackberry.push.PushExtension</entryClass>
    
    <dependencies>
      <extension id="blackberry.identity"/>
    </dependencies>
  </extension>
  
  <platforms>
    <platform value="JAVA">
      <target version="default" config="JAVA_XHR"/>
      <target version="5.0" config="JAVA_XHR_BlackBerry"/>
    </platform>
  </platforms>
  <configurations>
    <configuration name="JAVA_XHR" version="1.0" comment="For XHR architecture for Java implementation">
      <src type="text/java" path="blackberry" comment="API implementation in JavaScript"/>
    </configuration>
    <configuration name="JAVA_XHR_BlackBerry" version="1.0" comment="For XHR architecture for Java implementation for OS 5.0">
      <src type="text/java" path="blackberry" comment="API implementation in JavaScript"/>
    </configuration>
  </configurations>
  <features>
    <feature id="blackberry.push" version="1.0.0"/>
  </features>
  
  <object name="blackberry.push" shortName="Push" introduced="1.0.0" comment="The Push object allows you to leverage the BlackBerry push architecture to receive push data in your application.">
    <features>
      <feature id="blackberry.push" version="1.0.0"/>
    </features>
    <example><![CDATA[<script  type="text/javascript">
  var port = 1234; 
  var appId = ""46-55re2RM55eh2M5"";
  var url = "http://pushapi.eval.blackberry.com";

  function openPushListener() {
    //See if they have a BIS transport.. if so use it
    var transports = blackberry.system.getTransportList();
    found = false;
    for (var i = 0; i < transports.length; i++) {
      if (transports[i].name == "BIS") {
        found = true;
        blackberry.push.openBISPushListener(port, appId, url, handlePushData, handleRegistration, handSimChange);
        break;
      }
    }
    if (!found)
      blackberry.push.openBESPushListener(port, handPushData, handleSimChange);
  }

  function handleRegistration(result) {
    if ( result != 0 ) {
      alert('Registration failed, reason:' + result);
    }
  }
  
  function handleSimChange() {
    if ( confirm.register("SIM card is changed, re-register?") ) {
        openPushListener();
    }  
  }
  
  function handlePushData(data) {
    if (data != null) {
      var myRecievedData= blackberry.utils.blobToString(data.payload)
      alert(myRecievedData);
    }
    else
      alert("No data from the push");
  }

  function cancelSubscription() {
    blackberry.push.closePushListener(port);
  }
</script>]]></example>
    
    <subclasses>
      <object name="onMessage" shortName="onMessage Interface" interface="true" comment="Interface for taking action on a newly received push.">
        <param name="data" type="blackberry.push.Data" comment="Object that contains the data that was just received"/>
      </object>
      <object name="onRegister" shortName="onRegister Interface" interface="true" comment="Interface for taking action on registration.">
        <param name="result" type="Number" comment="The error or success code will be passed in corresponding to the following codes 0: success, 1: network error, 2: rejected by server, 3: invalid parameter, -1: general error."/>
      </object>
      <object name="onSimChange" shortName="onSimChange Interface" interface="true" comment="Interface for taking action on a SIM card change. Suggested implementation: Close the push listener, prompt the user whether they want to re-register and, if so, open the push listener again.">
      </object>
    </subclasses>
    
    <functions>
      <func name="openPushListener" returns="void" static="true" comment="Registers a callback method that will be called when new data has been pushed to the device.">
        <param name="callback" type="OnData" comment="JavaScript function to be called when new data arrives."/>
        <param name="port" type="Number" comment="Integer port number to listen on for push data."/>
        <param name="transport" type="blackberry.identity.Transport" optional="true" comment="optional parameter where you can choose which communications transport you wish to listen on."/>
        <param name="maxQueueCap" type="Number" optional="true" comment="optional parameter that specifies how many messages the widget should queue if the port was not closed, but a function handler was lost (for example, during a page transition). See details."/>
        <details>
          The function that is assigned as the callback function will be called with one parameter passed to it. The object passed to the callback function is of type blackberry.push.Data which has a payload property that is a Blob as described in Gears. The developer can then retrieve the data either as the Blob or use .toString() if the data contained in the blob is a string.  Furthermore, the callback function must return an integer (one of constants described in blackberry.push.Data) indicating if the push message is accepted or declined.
          
          Since the state for JavaScript for a web page is only as long as the web page is being viewed, there is a need for the widget to maintain the open port for push information.  This allows this listening for push data to remain open between page transitions.
          
          To subscribe to the same previously opened push port on a new web page, a secondary call to openPushListener is called.  In this scenario it will re-assign the callback provided to the already open port.  If calling openPushListener on a page where the port is already open, the callback will be updated to use the latest one passed in.  NOTE: In such cases where consecutive calls to openPushListener occurs on the page, the transport argument will only be used on the first call, and ignored for all others.
          Any calls to openPushListener should have matching calls to closePushListener to ensure ports are not left open accidentally.
        </details>
      </func>
      <func name="openBESPushListener" returns="void" static="true" comment="Opens the push listener to allow an application to listen for BES pushes.">
        <param name="port" type="Number" comment="The port on the device to listen for pushes on."/>
        <param name="pushCallback" type="onMessage" comment="The ScriptableFunction that is invoked when a new push has been received."/>
        <param name="simChangeCallback" type="onSimChange" comment="The ScriptableFunction that is invoked on a SIM card change (since it has implications on the receiving of pushes)."/>
        <param name="maxQueueCap" type="Number" optional="true" comment="The maximum number of pushes to queue before the oldest pushes are discarded. If the number is not provided, no limit is imposed."/>
      </func>
      <func name="openBISPushListener" returns="void" static="true" comment="Opens the push listener to allow an application to listen for BIS pushes.">
        <param name="port" type="Number" comment="The port on the device to listen for pushes on."/>
        <param name="appId" type="String" comment="The id provided to you for your push application after signing up to use the BlackBerry Push Service."/>
        <param name="url" type="String" comment="The URL of the push server.  Examples of this URL include: http://pushapi.eval.blackberry.com if using the eval environment of the BlackBerry Push Service or http://pushapi.na.blackberry.com if using the production environment of the BlackBerry Push Service."/>
        <param name="pushCallback" type="onMessage" comment="The ScriptableFunction that is invoked when a new push has been received."/>
        <param name="registerCallback" type="onRegister" comment="The ScriptableFunction that is invoked when the result of the registration performed during the opening of the push listener is received."/>
        <param name="simChangeCallback" type="onSimChange" comment="The ScriptableFunction that is invoked on a SIM card change (since it has implications on the receiving of pushes)."/>
        <param name="maxQueueCap" type="Number" optional="true" comment="The maximum number of pushes to queue before the oldest pushes are discarded. If the number is not provided, no limit is imposed."/>
      </func>
      <func name="closePushListener" static="true" returns="void" comment="Closes the push listener so that an application can no longer listen for pushes.">
        <param name="port" type="Number" optional="true" comment="The port on the device to be closed. If port is not provided, the function will close all ports and unregister the application from the push server."/>
      </func>
    </functions>
    
  </object>
</library>
